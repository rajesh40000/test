public class ExtendedVisitPlanCtrl {
    public Visit_plan__c vp{get;set;}
    public id pageid{get;set;}
    public date store{get;set;}
    public boolean b1{get;set;}
    public list<Visit_plan__c> dd{get;set;}
    public list<Tour_plan__c> dp{get;set;}
    public set<date> setd{get;set;}
    public list<Tour_plan__c> dpfinal{get;set;}
    //public list<daily_plan__c> dailylist{get;set;}
    public list<Visit_plan_expense__c> expense{get;set;}
    public list<string> sendto{get;set;}
    public List<User> Usergrade{get;set;}

    
    public ExtendedVisitPlanCtrl(ApexPages.StandardController controller) {
        pageid=apexpages.currentpage().getparameters().get('id');   
        Usergrade= [select email,grade__c,manager.email from user where id=: UserInfo.getUserId()];
        sendto= new list<string>();
        sendto.add(Usergrade[0].email);
        if(Usergrade[0].manager.email != null){
            sendto.add(Usergrade[0].manager.email);
        }
        dd= new list<Visit_plan__c>();
        
        dp= new list<Tour_plan__c>();
        dpfinal= new list<Tour_plan__c>();
        //dailylist = new list<daily_plan__c>();
        expense= new list<Visit_plan_expense__c>();
        setd= new set<date>();
        vp=[Select name,city_lookup__c,visit_status__c,from__c,Local_Difference__c,Food_Difference__c,Lodging_Difference__c,Approvers_Comment__c ,Total_Approved_Amount__c,To__c, Miscellaneous_Amount_Approved__c,Travel_Type_Entitled__c, Travel_Amount_Approved__c ,travel_amount__c, travel_type__c,
            X2_AC_Train_Amount_Approved__c, X2_AC_Train_Amount_Claimed__c, X2nd_Class_Sleeper_Train_Amount_Approve__c, X2nd_Class_Sleeper_Train_Amount_Claimed__c, X3_AC_Train_Amount_Approved__c, X3_AC_Train_Amount_Claimed__c, 
                Approval_Status__c, Expense_Approval_Status__c ,ownerid,  recordtypeid, Miscellaneous_Amount__c, Description__c, Lodging_Expense_Claimed__c, Local_Conveyance_Claimed__c, Food_Allowances_Claimed__c, Lodging_Expense_Entitled__c, Food_Allowances_Entitled__c, Local_Conveyance_Entitled__c, Lodging_Expense_Approved__c, Food_Allowances_Approved__c, Local_Conveyance_Approved__c from Visit_plan__c where id=: pageid];
        store=vp.to__c; 
        b1=true;
    }
    
    public void SaveAndNext(){
        try{    
                
                
                Date startDate = vp.To__c;
            	system.debug(startDate);
                dd=[select name from visit_plan__c where To__c >=: startDate and from__c <=: startDate and ownerid=: vp.ownerid and recordtype.name='outstation' and visit_status__c !='Cancelled'];
                if(store > vp.To__c){
                    ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.Error,'You can not roll back the dates. Please select future dates for which Visit Plan has been extended')); 
                    
                }
                else if(vp.To__c < vp.from__c){
                    ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.Error,'From date always less than To Date'));    
                }
                else if(dd.size()>0){
                    ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.Error,'Already Visit created for this Range date'));
                }    
                
                else
                
                {
                    b1=false;
                    Tour_plan__c dpp= new Tour_plan__c();
                        dpp.from__c=store +1;
                        dpp.to__c=vp.to__c;
                    dp.add(dpp);
                    
                }
            If(Test.isRunningTest())
            {
               Integer x = 1/0; //Controller will reach here only when code is runninging test mode and will throw exception e.
            } 
           
        }
        catch(Exception ex){
            ApexPages.addMessages(ex);
        }       
    }
    
    
     public PageReference Savefinal() {
        
            setd.clear();
            dpfinal.clear();
            integer i=1;
            
            for(Tour_plan__c vv: dp){
                if(vv.To__c < vv.from__c){
                    ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.Error,'From date always less than To Date'));    
                }
                else if(vv.from__c < store || vv.To__c > vp.To__c){
                    ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.Error,'Please enter From and To date according to Visit Plan Range'));
                }
                else if(setd.contains(vv.from__c)){
                    ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.Error,'Already used this'+ '(' +vv.from__c +')' +'date in before line items'));
                }
                else{
                    integer calculatedays= vv.from__c.daysBetween(vv.To__c);
                    for(integer j=0; j<=calculatedays ; j++){
                        setd.add(vv.from__c + j);
                        
                    }
                    system.debug(setd);
                    Date d = vv.from__c;
                    Date d1 = vv.To__c;
                    //vv.name=string.valueof(DateTime.newInstance(d.year(),d.month(),d.day()).format('dd/MM/YY'))+'-'+ string.valueof(DateTime.newInstance(d1.year(),d1.month(),d1.day()).format('dd/MM/YY'))+'-'+ i;
                    vv.name=string.valueof(DateTime.newInstance(d.year(),d.month(),d.day()).format('dd/MM/YY'))+'-'+ string.valueof(DateTime.newInstance(d1.year(),d1.month(),d1.day()).format('dd/MM/YY'));
                    vv.Visit_Plan__c=vp.id; 
                    
                    i++;
                     dpfinal.add(vv);
                     /*daily_plan__c ddd= new daily_plan__c();
                     ddd.Tour_Plan__c=vv.id;
                     ddd.Visit_Plan__c=vp.id;
                     dailylist.add(ddd);*/
               } 
               
                  
            }
            if(dp.size() == 1)
            {
                if(dp[0].From__c != store+1 || dp[0].To__c != vp.To__c){
                    ApexPages.addMessage(new ApexPages.Message(ApexPages.Severity.Error,'For Single Tour Plan, From and To date must be same as Visit Plan'));
                }
                else{
                    update vp;
                    insert dpfinal;
                    for(Tour_plan__c tp: dpfinal){
                        tp.Visit_Plan__c=vp.id;
                        tp.status__c='extended';
                        integer calculatedays= tp.from__c.daysBetween(tp.To__c);
                        for(integer j=0; j<=calculatedays ; j++){
                            Visit_plan_expense__c vpe= new Visit_plan_expense__c();
                            vpe.city_lookup__c= tp.city_lookup__c;
                            vpe.from__c= tp.from__c + j;
                            //vpe.to__c= tp.to__c;
                            vpe.visit_plan__c= vp.id;
                            expense.add(vpe); 
                        
                        }
                               
                    
                    }
                    update dpfinal;
                    
                    upsert expense;
                    
                    List<Messaging.SingleEmailMessage> allmsg = new List<Messaging.SingleEmailMessage>();
                    Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
                    
                    mail.setSaveAsActivity(false);
                    mail.setToAddresses(sendto);
                    mail.setSubject('Update Outstation Visit');
                          String body = 'Dear,<br/><br/>';
                          string urrlll=URL.getSalesforceBaseUrl().toExternalForm()+'/'+pageid;
                          body += 'Outstation visit plan (<a href="' +urrlll+'">'+vp.name+'</a>) has been updated. <br/><br/><br/>';
                                   
                          body +='<table border="1" style="font-family: arial, sans-serif;border-collapse: collapse"><tr><td style="border: 1px solid #dddddd;text-align: left;padding: 8px;font-size: 12px;">From Date </td><td style="border: 1px solid #dddddd;text-align: left;padding: 8px;font-size: 12px;">' +vp.From__c +'</td></tr>';
                          body +='<tr><td style="border: 1px solid #dddddd;text-align: left;padding: 8px;font-size: 12px;">To Date </td><td style="border: 1px solid #dddddd;text-align: left;padding: 8px;font-size: 12px;">' +vp.To__c +'</td></tr>';
                            body +='<tr><td style="border: 1px solid #dddddd;text-align: left;padding: 8px;font-size: 12px;">Visit Approval Status </td><td style="border: 1px solid #dddddd;text-align: left;padding: 8px;font-size: 12px;">' +vp.Approval_Status__c +'</td></tr>';
                            //body +='<tr><td style="border: 1px solid #dddddd;text-align: left;padding: 8px;font-size: 12px;">Cancel Reason </td><td style="border: 1px solid #dddddd;text-align: left;padding: 8px;font-size: 12px;">' +vp.Cancel_Reason__c +'</td></tr>';
                            body +='</table><br/><br/>';
                            body +='Thank You,<br/>Alstrong Salesforce Team<br/><br/><br/>' ;                       
                          mail.setHtmlBody(body);
                       allmsg.add(mail);
                     Messaging.sendEmail(allmsg,true);  
                    PageReference pageRef = new PageReference('/apex/VisitPlanDetailPageOutStation?id=' +vp.id);
                    pageRef.setredirect(true);
                    return pageRef;
                    /*tourplanlist= [select name,(select name from daily_plans__r) from tour_plan__c where visit_plan__c=:vp.id];
                    system.debug(tourplanlist.size());
                    for(tour_plan__c tp: tourplanlist)
                        system.debug(tp.daily_plans__r[0].name);
                    return null;*/
                    
                }
            }
            else
           
            
            if(dp.size() == dpfinal.size()){
                
                
                    upsert vp;
                    insert dpfinal;
                    for(Tour_plan__c tp: dpfinal){
                        tp.Visit_Plan__c=vp.id;
                        integer calculatedays= tp.from__c.daysBetween(tp.To__c);
                        tp.status__c='extended';
                        for(integer j=0; j<=calculatedays ; j++){
                            Visit_plan_expense__c vpe= new Visit_plan_expense__c();
                            vpe.city_lookup__c= tp.city_lookup__c;
                            vpe.from__c= tp.from__c + j;
                            //vpe.to__c= tp.to__c;
                            vpe.visit_plan__c= vp.id;
                            expense.add(vpe); 
                        
                        }
                      
                    
                    }
                    update dpfinal;
                    upsert expense;
                    
                    List<Messaging.SingleEmailMessage> allmsg = new List<Messaging.SingleEmailMessage>();
                    Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
                    
                    mail.setSaveAsActivity(false);
                    mail.setToAddresses(sendto);
                    mail.setSubject('Update Outstation Visit');
                          String body = 'Dear<br/><br/>';
                          
                          body += 'There is an Updation in outstation visit plan. <br/><br/><br/>';
                          body += 'Please find below URL for Visit Plan<br/><br/><br/>';
                          body +=  URL.getSalesforceBaseUrl().toExternalForm()+'/'+pageid +'<br/><br/><br/>';              
                       
                          mail.setHtmlBody(body);
                       allmsg.add(mail);
                     Messaging.sendEmail(allmsg,true);  

                    PageReference pageRef = new PageReference('/apex/VisitPlanDetailPageOutStation?id=' +vp.id);
                    pageRef.setredirect(true);
                    return pageRef;
                
            }
            
            return null;
            
              
        
       
    }
    
    public void addrow() {
        Tour_plan__c dpp= new Tour_plan__c ();
            //dpp.date__c=vp.from__c;
        dp.add(dpp); 
    }
    
    public void removerow(){
        Integer i = dp.size();
        if(i >1 || test.isRunningTest())
            dp.remove(i-1);
    }
    

}