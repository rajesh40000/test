public without sharing class DocFolder {
    
         
    public class accountListWrapper {
        @AuraEnabled public boolean isChecked {get;set;}
        @AuraEnabled public  Invoice__c objAccount{get;set;}
        public accountListWrapper(boolean isChecked, Invoice__c objAccount){
            this.isChecked = isChecked;
            this.objAccount = objAccount;
        }
    }
    
    @AuraEnabled
    public static map<string,string> getvehiclename()
    {   list<Vehicle__c> vch=[select id,Vehicle_No__c from Vehicle__c];
     
     map<string,string> mp = new map<string,string>();
     //  mp.put(new SelectOption('','--None--'));
     
     for(Vehicle__c vc:vch)
     {
         mp.put(vc.Vehicle_No__c,vc.Vehicle_No__c) ;
         
     }
     return mp;
    }
    
    @AuraEnabled
    public static void saverecod(list<Quote__c> getIDs, string selectedValue)
    { 
          System.debug(getIDs+'getIDs'); 
         System.debug('selectedValue->'+selectedValue); 
        list<Invoice__c> invoice =new list<Invoice__c>();
        list<Quote__c> quo =new list<Quote__c>();
        for(Quote__c str :getIDs)
        {
            str.Quote_Status__c = 'Invoiced';
            
            quo.add(str);
            
        }
        upsert (quo);
        
        for(Quote__c acc : getIDs){
            list<Quote__c> ord=[select id ,Order_To__c,	Total_Amount_In_Rs__c,Total_Amount_Inc_Tax__c,
                                Billing_Street__c,Billing_City__c,Billing_Zip__c,Billing_State_Province__c,Billing_Country__c,Street__c,City__c,
                                Zip_Postal_Code__c,State_Province__c,Country__c
                                from Quote__c where id=:acc.id];
            Invoice__c vc =new Invoice__c();
            vc.Customer__c=ord[0].Order_To__c;
            vc.Invoice_Date__c=system.today();
            vc.Net_Value__c=ord[0].Total_Amount_In_Rs__c;
            vc.Billing_Street__c=ord[0].Billing_Street__c;
            vc.Billing_City__c=ord[0].Billing_City__c;
            vc.Billing_Zip_Postal_Code__c=ord[0].Billing_Zip__c;
            vc.Billing_State_Province__c=ord[0].Billing_State_Province__c;
            vc.Billing_Country__c=ord[0].Billing_Country__c;
            vc.Street__c=ord[0].Street__c;
            vc.City__c=ord[0].City__c;
            vc.Zip_Postal_Code__c=ord[0].Zip_Postal_Code__c;
            vc.State_Province__c=ord[0].State_Province__c;
            vc.Country__c=ord[0].Country__c;
            
            //	vc.Invoice_Amount_Inc_Tax__c=ord[0].Total_Amount_Inc_Tax__c;
            
            vc.Related_Quote__c= acc.id;
            vc.Vehicle_No__c=SelectedValue;
            
            invoice.add(vc);
            
            
        }       
        
        System.debug(invoice+'invoiceinvoice');
        insert invoice;
        
        
        
    }
    
    @AuraEnabled
    public static map<string,string> getbeatename()
    {   list<Beats__c> vch=[select id,Name from Beats__c];
     
     map<string,string> mp = new map<string,string>();
     //  mp.put(new SelectOption('','--None--'));
     
     for(Beats__c vc:vch)
     {
         mp.put(vc.id,vc.Name) ;
         
     }
     return mp;
    }
    
    @AuraEnabled
    public static map<string,string> getAreaName()
    {   
        
        map<string,string> mp = new map<string,string>();
        //  mp.put(new SelectOption('','--None--'));
        for(Quote__c acc : [Select id,Name,Order_To__r.Name,Order_Date__c,Beat__r.Name,Sales_Visit__r.Name,Loyalty_Points_Added__c,Beat_ID11__c,Area1__c,Total_Amount_In_Rs__c,Total_Amount_Inc_Tax__c,Quote_Status__c
                            From Quote__c where Area1__c !='' Order By createdDate DESC
                            Limit 1000]){
                                mp.put(acc.Area1__c,acc.Area1__c) ;    
                            }
        
        return mp;
    }
    
     
    @AuraEnabled
    public static list<Custom_Notes_Attachment__c> fetchAccountWrapper(){
        return [select id,Name,Name__c,Description__c From Custom_Notes_Attachment__c];        
    }  
    
    
    @AuraEnabled
    public static list<Invoice__c> saverecod5(list<Invoice__c> a)
    {
        update a;
        return a;
    }
      @AuraEnabled
    public static Id saveChunk(Id parentId, String fileName, String base64Data, String contentType, String fileId) {
        // check if fileId id ''(Always blank in first chunk), then call the saveTheFile method,
        //  which is save the check data and return the attachemnt Id after insert, 
        //  next time (in else) we are call the appentTOFile() method
        //   for update the attachment with reamins chunks   
        Custom_Notes_Attachment__c cusatt=new Custom_Notes_Attachment__c();
        cusatt.Name__c=fileName;
        cusatt.Description__c=fileName;
        insert cusatt; 
        parentId= cusatt.id;
        if (fileId == '') {
            fileId = saveTheFile(parentId, fileName, base64Data, contentType);
        } else {
            appendToFile(fileId, base64Data);
        }
        
        return Id.valueOf(fileId);
    }
    
    public static Id saveTheFile(Id parentId, String fileName, String base64Data, String contentType) {
        base64Data = EncodingUtil.urlDecode(base64Data, 'UTF-8');
 
        Attachment oAttachment = new Attachment();
        oAttachment.parentId = parentId;
 
        oAttachment.Body = EncodingUtil.base64Decode(base64Data);
        oAttachment.Name = fileName;
        oAttachment.ContentType = contentType;
 
        insert oAttachment;
 
        return oAttachment.Id;
    }
 
    private static void appendToFile(Id fileId, String base64Data) {
        base64Data = EncodingUtil.urlDecode(base64Data, 'UTF-8');
        
        Attachment a = [
            SELECT Id, Body
            FROM Attachment
            WHERE Id =: fileId
        ];
        
        String existingBody = EncodingUtil.base64Encode(a.Body);
        
        a.Body = EncodingUtil.base64Decode(existingBody + base64Data);
        
        update a;
    }
    
}